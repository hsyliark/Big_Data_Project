babymom <- unlist(babymom)
babymom <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=5}, babymom)
wordcount <- table(babymom)
head(sort(wordcount,decreasing=T),100)
require(wordcloud2)
wordcloud2(wordcount,size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
wordcloud2(wordcount[wordcount>1],size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
wordcloud2(wordcount[wordcount>2],size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
wordcloud2(wordcount[wordcount>3],size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
sum(wordcount=1)
sum(wordcount=2)
sum(wordcount=3)
sum(wordcount==1)
sum(wordcount==2)
sum(wordcount==3)
sum(wordcount==4)
sum(wordcount==5)
wordcount[wordcount==1]
wordcount[wordcount==2]
wordcount[wordcount==3]
wordcloud2(wordcount[wordcount>2],size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
setwd("D:/Workplace/StatisticsKorea_Big_Data_Project/크롤링")
positive <- readLines("D:/Workplace/StatisticsKorea_Big_Data_Project/크롤링/군산대 감성사전/positive.txt",
encoding="EUC-KR")
positive <- positive[-1]
negative <- readLines("D:/Workplace/StatisticsKorea_Big_Data_Project/크롤링/군산대 감성사전/negative.txt",
encoding="EUC-KR")
negative <- negative[-1]
require(plyr)
sentimental <- function(sentences,positive,negative) {
scores <- laply(sentences,function(sentence,positive,negative) {
sentence <- gsub('[[:punct:]]','',sentence) # 문장부호 제거
sentence <- gsub('[[:cntrl:]]','',sentence) # 특수문자 제거
sentence <- gsub('\\d+','',sentence) # 숫자 제거
word.list <- str_split(sentence,'\\s+') # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개이상)
words <- unlist(word.list) # unlist() : list를 vector 객체로 구조변경
pos.matches <- match(words,positive) # words의 단어를 positive에서 matching
neg.matches <- match(words,negative)
pos.matches <- !is.na(pos.matches) # NA 제거, 위치(숫자)만 추출
neg.matches <- !is.na(neg.matches)
score <- sum(pos.matches) - sum(neg.matches) # 긍정 - 부정
return(score)
}, positive, negative)
scores.df <- data.frame(score=scores,text=sentences)
return(scores.df)
}
result <- sentimental(babymom,positive,negative)
result$color[result$score >= 1] <- "blue"
result$color[result$score == 0] <- "green"
result$color[result$score < 0] <- "red"
table(result$color)
result$remark[result$score >= 1] <- "긍정"
result$remark[result$score == 0] <- "중립"
result$remark[result$score < 0] <- "부정"
sentiment_result <- table(result$remark)
table(result$remark)
remark <- c("긍정","부정","중립")
count <- c(42,17,2328)
result1 <- data.frame(remark=remark,count=count)
result1 <- result1 %>%
mutate(pct=round(count/sum(count)*100,2)) %>%
mutate(ylabel=paste0("약",pct,"%")) %>%
mutate(ypos=cumsum(pct)-0.5*pct)
result1$remark <- factor(result1$remark,levels=rev(as.character(result1$remark)))
result1
ggplot(result1,aes(x="",y=pct,fill=remark)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ypos,label=ylabel),color="black") +
coord_polar(theta="y",start=0) +
xlab("") + ylab("") +
ggtitle("육아 관련 네이버 블로그 감성분석") +
theme(plot.title=element_text(color="black",size=16,face="bold",hjust=0.5))
library(ggplot2)
library(dplyr)
ggplot(result1,aes(x="",y=pct,fill=remark)) +
geom_bar(stat="identity", width=1) +
geom_text(aes(y=ypos,label=ylabel),color="black") +
coord_polar(theta="y",start=0) +
xlab("") + ylab("") +
ggtitle("육아 관련 네이버 블로그 감성분석") +
theme(plot.title=element_text(color="black",size=16,face="bold",hjust=0.5))
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=신혼부부" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
library(httr)
clientid <- "GC_RIpLxQUqT9NK1OkmC" # 개인 api id 값
clientSecret <- "bLbCIIo2GT" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", result)
babymom <- gsub("[[:punct:]]", " ", babymom) # 특수문자 제거
babymom <- gsub("[A-z]", " ", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", " ", babymom) # 숫자 제거
babymom <- gsub(" +", " ", babymom)
babymom <- gsub("^"," ", babymom)
babymom <- gsub("ㅋ"," ", babymom)
babymom <- gsub("ㅎ"," ", babymom)
babymom <- gsub("ㅜ"," ", babymom)
babymom <- gsub("개월아기","아기",babymom)
babymom
babymom <- sapply(babymom,extractNoun,USE.NAMES=F)
babymom <- unlist(babymom)
babymom
babymom <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=5}, babymom)
wordcount <- table(babymom)
head(sort(wordcount,decreasing=T),100)
result
babymom <- sapply(result,extractNoun,USE.NAMES=F)
babymom
babymom <- result
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", babymom)
babymom <- gsub("[[:punct:]]", " ", babymom) # 특수문자 제거
babymom <- gsub("[A-z]", " ", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", " ", babymom) # 숫자 제거
babymom <- gsub(" +", " ", babymom)
babymom <- gsub("^"," ", babymom)
babymom
babymom <- gsub("ㅋ"," ", babymom)
babymom <- gsub("ㅎ"," ", babymom)
babymom <- gsub("ㅜ"," ", babymom)
babymom <- sapply(result,extractNoun,USE.NAMES=F)
babymom <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=5}, babymom)
babymom <- unlist(babymom)
wordcount <- table(babymom)
head(sort(wordcount,decreasing=T),100)
babymom <- result
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", babymom)
babymom <- gsub("[[:punct:]]", " ", babymom) # 특수문자 제거
babymom <- gsub("[A-z]", " ", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", " ", babymom) # 숫자 제거
babymom <- gsub(" +", " ", babymom)
babymom <- gsub("^"," ", babymom)
babymom <- gsub("ㅋ"," ", babymom)
babymom <- gsub("ㅎ"," ", babymom)
babymom <- gsub("ㅜ"," ", babymom)
babymom <- gsub("naver","",babymom)
babymom <- gsub("blog","",babymom)
babymom <- gsub("https","",babymom)
babymom <- gsub("link","",babymom)
babymom <- gsub("title","",babymom)
babymom <- gsub("com","",babymom)
babymom <- result
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", babymom)
babymom <- gsub("[[:punct:]]", " ", babymom) # 특수문자 제거
babymom <- gsub("[A-z]", " ", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", " ", babymom) # 숫자 제거
babymom <- gsub(" +", " ", babymom)
babymom <- gsub("^"," ", babymom)
babymom <- gsub("ㅋ"," ", babymom)
babymom <- gsub("ㅎ"," ", babymom)
babymom <- gsub("ㅜ"," ", babymom)
babymom <- gsub("naver"," ",babymom)
babymom <- gsub("blog"," ",babymom)
babymom <- gsub("https"," ",babymom)
babymom <- gsub("link"," ",babymom)
babymom <- gsub("title"," ",babymom)
babymom <- gsub("com"," ",babymom)
babymom <- sapply(result,extractNoun,USE.NAMES=F)
babymom
babymom <- result
babymom
babymom <- result
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", babymom)
babymom <- gsub("[[:punct:]]", " ", babymom) # 문장부호 제거
babymom <- gsub("[[:cntrl:]]"," ",babymom) # 특수문자 제거
babymom <- gsub("[A-z]", " ", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", " ", babymom) # 숫자 제거
babymom <- gsub(" +", " ", babymom)
babymom <- gsub("^"," ", babymom)
babymom <- gsub("ㅋ"," ", babymom)
babymom <- gsub("ㅎ"," ", babymom)
babymom <- gsub("ㅜ"," ", babymom)
babymom <- gsub("naver"," ",babymom)
babymom <- gsub("blog"," ",babymom)
babymom <- gsub("https"," ",babymom)
babymom <- gsub("link"," ",babymom)
babymom <- gsub("title"," ",babymom)
babymom <- gsub("com"," ",babymom)
babymom <- sapply(result,extractNoun,USE.NAMES=F)
babymom <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=5}, babymom)
babymom <- unlist(babymom)
wordcount <- table(babymom)
head(sort(wordcount,decreasing=T),100)
require(wordcloud2)
wordcloud2(wordcount[wordcount>2],size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
babymom <- result
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", "", babymom)
babymom <- gsub("[[:punct:]]", "", babymom) # 문장부호 제거
babymom <- gsub("[[:cntrl:]]","",babymom) # 특수문자 제거
babymom <- gsub("[A-z]", "", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", "", babymom) # 숫자 제거
babymom <- gsub(" +", "", babymom)
babymom <- gsub("^","", babymom)
babymom <- gsub("ㅋ","", babymom)
babymom <- gsub("ㅎ","", babymom)
babymom <- gsub("ㅜ","", babymom)
babymom <- gsub("naver","",babymom)
babymom <- gsub("blog","",babymom)
babymom <- gsub("https","",babymom)
babymom <- gsub("link","",babymom)
babymom <- gsub("title","",babymom)
babymom <- gsub("com","",babymom)
babymom <- gsub(" ","",babymom)
babymom
babymom <- sapply(result,extractNoun,USE.NAMES=F)
babymom
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", "", babymom)
babymom <- gsub("[[:punct:]]", "", babymom) # 문장부호 제거
babymom <- gsub("[[:cntrl:]]","",babymom) # 특수문자 제거
babymom <- gsub("[A-z]", "", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", "", babymom) # 숫자 제거
babymom <- gsub(" +", "", babymom)
babymom <- gsub("^","", babymom)
babymom <- gsub("ㅋ","", babymom)
babymom <- gsub("ㅎ","", babymom)
babymom <- gsub("ㅜ","", babymom)
babymom <- gsub("naver","",babymom)
babymom <- gsub("blog","",babymom)
babymom <- gsub("https","",babymom)
babymom <- gsub("link","",babymom)
babymom <- gsub("title","",babymom)
babymom <- gsub("com","",babymom)
babymom <- gsub(" ","",babymom)
babymom
babymom <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=5}, babymom)
babymom <- unlist(babymom)
wordcount <- table(babymom)
head(sort(wordcount,decreasing=T),100)
babymom <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=4}, babymom)
babymom <- unlist(babymom)
wordcount <- table(babymom)
head(sort(wordcount,decreasing=T),100)
require(wordcloud2)
wordcloud2(wordcount[wordcount>2],size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
sum(wordcount==1)
sum(wordcount==2)
sum(wordcount==3)
result <- sentimental(babymom,positive,negative)
result$color[result$score >= 1] <- "blue"
result$color[result$score == 0] <- "green"
result$color[result$score < 0] <- "red"
table(result$color)
result$remark[result$score >= 1] <- "긍정"
result$remark[result$score == 0] <- "중립"
result$remark[result$score < 0] <- "부정"
install.packages("arules")
library(arules)
wordtran <- as(babymom, "transactions") # lword에 중복데이터가 있으면 error발생
?as
install.packages("arulesViz")
library(arulesViz)
data("Groceries")
Groceries
class(Groceries)
summary(Groceries)
inspect(Groceries[1:10])
itemFrequency(Groceries)
itemRequency(Groceries,type='absolute')
itemFrequency(Groceries,type='absolute')
itemFrequencyPlot(Groceries, type='absolute')
itemFrequencyPlot(Groceries, topN=20, type='absolute')
mtx.trans <- as(mtx, 'transactions')
----------------------------------------------------
mtx <- matrix(c(1,1,1,0,0,
1,1,1,1,0,
0,0,1,1,0,
0,1,0,1,1,
0,0,0,1,0), ncol=5, byrow=T)
----------------------------------------------------
mtx <- matrix(c(1,1,1,0,0,
1,1,1,1,0,
0,0,1,1,0,
0,1,0,1,1,
0,0,0,1,0), ncol=5, byrow=T)
mtx <- matrix(c(1,1,1,0,0,
1,1,1,1,0,
0,0,1,1,0,
0,1,0,1,1,
0,0,0,1,0), ncol=5, byrow=T)
rownames(mtx) <- paste0("ti",1:5)
colnames(mtx) <- letters[1:5]
mtx
mtx.trans <- as(mtx, 'transactions')
mtx.trans
summary(mtx.trans)
inspect(mtx.trans)
df <- as.data.frame(mtx)
df.trans <- as(df,"transactions") # error
str(df)
df <- as.data.frame(sapply(df,as.logical))
str(df)
df.trans <- as(df,'transactions')
df.trans
summary(df.trans)
inspect(df.trans)
list <- list(tr1=c("a","b","c"),
tr2=c("a","d"),
tr3=c("b","e"),
tr4=c("a","d","e"),
tr5=c("b","c","d"))
list
list.trans <- as(list,'transactions')
list.trans
summary(list.trans)
inspect(list.trans)
list.trans@data
list.trans@itemInfo
Groceries@data
Groceries@itemInfo
level1 <- c("음료","음료","햄버거","햄버거","피자")
list.trans@itemInfo <- cbind(list.trans@itemInfo,level1)
list.trans@itemInfo
inspect(list.trans)
list.trans2 <- aggregate(list.trans, 'level1')
list.trans2
inspect(list.trans2)
image(list.trans2)
# 2회이상 거래가 이루어진 2품목이상 10품목이하의 itemset의 support를 구하는 함수
ecl <- eclat(Groceries, parameter=list(support=2/9835,minlen=2 ,maxlen=10))
ecl
inspect(sort(ecl)[1:50])
summary(ecl)
rule <- apriori(Groceries, parameter=list(minlen=2))
rule
rule <- apriori(Groceries, control=list(verbos=F), parameter=list(support=50/9835, confidence=0.6 ,minlen=2))
rule
summary(rule)
inspect(rule)
rule <- sort(rule, by='lift')
inspect(rule[1:20])
babymom <- result
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", "", babymom)
babymom <- gsub("[[:punct:]]", "", babymom) # 문장부호 제거
babymom <- gsub("[[:cntrl:]]","",babymom) # 특수문자 제거
babymom <- gsub("[A-z]", "", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", "", babymom) # 숫자 제거
babymom
View(result)
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=신혼부부" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
clientid <- "GC_RIpLxQUqT9NK1OkmC" # 개인 api id 값
clientSecret <- "bLbCIIo2GT" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
babymom <- result
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", "", babymom)
babymom <- gsub("[[:punct:]]", "", babymom) # 문장부호 제거
babymom <- gsub("[[:cntrl:]]","",babymom) # 특수문자 제거
babymom <- gsub("[A-z]", "", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", "", babymom) # 숫자 제거
babymom
babymom <- gsub(" +", "", babymom)
babymom <- gsub("^","", babymom)
babymom <- gsub("ㅋ","", babymom)
babymom <- gsub("ㅎ","", babymom)
babymom <- gsub("ㅜ","", babymom)
babymom <- gsub("naver","",babymom)
babymom <- gsub("blog","",babymom)
babymom <- gsub("https","",babymom)
babymom <- gsub("link","",babymom)
babymom <- gsub("title","",babymom)
babymom <- gsub("com","",babymom)
babymom <- gsub(" ","",babymom)
babymom <- Corpus(VectorSource(babymom))
library(arules)
babymom <- Corpus(VectorSource(babymom))
install.packages("tm")
library(tm)
?Corpus
babymom <- Corpus(VectorSource(babymom))
inspect(babymom)
wordtran <- as(babymom, "transactions") # lword에 중복데이터가 있으면 error발생
babymom <- result
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", "", babymom)
babymom <- gsub("[[:punct:]]", "", babymom) # 문장부호 제거
babymom <- gsub("[[:cntrl:]]","",babymom) # 특수문자 제거
babymom <- gsub("[A-z]", "", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", "", babymom) # 숫자 제거
babymom <- gsub(" +", "", babymom)
babymom <- gsub("^","", babymom)
babymom <- gsub("ㅋ","", babymom)
babymom <- gsub("ㅎ","", babymom)
babymom <- gsub("ㅜ","", babymom)
babymom <- gsub("naver","",babymom)
babymom <- gsub("blog","",babymom)
babymom <- gsub("https","",babymom)
babymom <- gsub("link","",babymom)
babymom <- gsub("title","",babymom)
babymom <- gsub("com","",babymom)
babymom <- gsub(" ","",babymom)
babymom <- sapply(result,extractNoun,USE.NAMES=F)
babymom <- Filter(function(x) {nchar(x)>=2 & nchar(x)<=4}, babymom)
wordcount <- table(babymom)
require(wordcloud2)
wordcloud2(wordcount[wordcount>2],size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", "", babymom)
babymom <- gsub("[[:punct:]]", "", babymom) # 문장부호 제거
babymom <- gsub("[[:cntrl:]]","",babymom) # 특수문자 제거
babymom <- gsub("[A-z]", "", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", "", babymom) # 숫자 제거
babymom <- gsub(" +", "", babymom)
babymom <- gsub("^","", babymom)
babymom <- gsub("ㅋ","", babymom)
babymom <- gsub("ㅎ","", babymom)
babymom <- gsub("ㅜ","", babymom)
babymom <- gsub("naver","",babymom)
babymom <- gsub("blog","",babymom)
babymom <- gsub("https","",babymom)
babymom <- gsub("link","",babymom)
babymom <- gsub("title","",babymom)
babymom <- gsub("com","",babymom)
babymom <- gsub(" ","",babymom)
wordcloud2(wordcount[wordcount>2],size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
head(sort(wordcount,decreasing=T),100)
babymom <- gsub("[A-z]", "", babymom) # 모든 영문자 제거
wordcloud2(wordcount[wordcount>2],size=8,col="random-dark",rotateRatio=0.5,
backgroundColor="white",shape="circle")
wwordcount
wordcount
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=신혼부부" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
clientid <- "GC_RIpLxQUqT9NK1OkmC" # 개인 api id 값
clientSecret <- "bLbCIIo2GT" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
babymom <- result
babymom <- gsub("<(\\/?)(\\w+)*([^<>]*)>", "", babymom)
babymom <- gsub("[[:punct:]]", "", babymom) # 문장부호 제거
babymom <- gsub("[[:cntrl:]]","",babymom) # 특수문자 제거
babymom <- gsub("[A-z]", "", babymom) # 모든 영문자 제거
babymom <- gsub("[0-9]", "", babymom) # 숫자 제거
babymom <- gsub(" +", "", babymom)
babymom <- gsub("^","", babymom)
babymom <- gsub("ㅋ","", babymom)
babymom <- gsub("ㅎ","", babymom)
babymom <- gsub("ㅜ","", babymom)
babymom <- gsub("naver","",babymom)
babymom <- gsub("blog","",babymom)
babymom <- gsub("https","",babymom)
babymom <- gsub("link","",babymom)
babymom <- gsub("title","",babymom)
babymom <- gsub("com","",babymom)
babymom <- gsub(" ","",babymom)
result
result
test <- result
str_split(test, "</title>")
test <- str_split(test, "</title>")
class(test)
typeof(test)
test[1]
test[[1]]
test[1][1]
str(test)
View(test)
class(result)
test[[1]][1]
test[[1]][2]
test[[1]][3]
length(test[[1]])
stest = c()
for(i in 1:102) {
stest <- c(stest, test[[1]][i])
}
head(stest)
